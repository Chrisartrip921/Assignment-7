{"version":3,"sources":["components/Loader.js","components/GifFInder.js","App.js","reportWebVitals.js","index.js"],"names":["Loader","className","icon","faSpinner","GifFInder","useState","data","setData","isLoading","setIsLoading","isError","setIsError","search","setSearch","random","setRandom","useEffect","a","axios","results","console","log","status","Error","fetchData","handleSubmit","event","preventDefault","params","q","handleRandom","result","value","onChange","target","type","placeholder","onClick","alt","src","image_url","map","img","images","original","url","id","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAWeA,EARA,WACX,OACI,8BACI,cAAC,IAAD,CAAiBC,UAAU,iBAAiBC,KAAQC,SC6GjDC,EA/GG,WAAO,IAAD,EACIC,mBAAS,IADb,mBACbC,EADa,KACPC,EADO,OAEcF,oBAAS,GAFvB,mBAEbG,EAFa,KAEFC,EAFE,OAGUJ,oBAAS,GAHnB,mBAGbK,EAHa,KAGJC,EAHI,OAIQN,mBAAS,IAJjB,mBAIbO,EAJa,KAILC,EAJK,OAKQR,mBAAS,IALjB,mBAKbS,EALa,KAKLC,EALK,KAMpBC,qBAAU,YACS,uCAAG,4BAAAC,EAAA,sEAEVR,GAAa,GAFH,SAGYS,IAAM,kFAHlB,UAGJC,EAHI,OAIVC,QAAQC,IAAIF,GACW,MAAnBA,EAAQG,OALF,sBAMA,IAAIC,MAAM,UANV,OASVhB,EAAQY,EAAQb,KAAKA,MAGrBG,GAAa,GAZH,kDAcNC,IACAC,GAAW,GACXS,QAAQC,IAAR,OAhBM,0DAAH,qDAoBfG,KACD,CAACd,IAGJ,IAoBMe,EAAY,uCAAG,WAAOC,GAAP,eAAAT,EAAA,sEAEbR,GAAa,GACbiB,EAAMC,iBAHO,SAKST,IAAM,gFAAiF,CACzGU,OAAQ,CACJC,EAAGjB,KAPE,OAKPO,EALO,OAUbC,QAAQC,IAAIF,GACZZ,EAAQY,EAAQb,KAAKA,MACrBG,GAAa,GACbM,EAAU,EAAC,IAbE,kDAebJ,GAAW,GAfE,0DAAH,sDAmBZmB,EAAY,uCAAG,4BAAAb,EAAA,sEAEbR,GAAa,GAFA,SAIQS,IAAM,iFAJd,OAIPa,EAJO,OAMbX,QAAQC,IAAIU,GACZhB,EAAUgB,EAAOzB,KAAKA,MACtBG,GAAa,GACbF,EAAQ,IATK,kDAWbI,GAAW,GACXS,QAAQC,IAAR,MAZa,0DAAH,qDAiBlB,OAAO,sBAAKpB,UAAU,YAAf,UACH,uBAAMA,UAAU,OAAhB,UACI,uBACI+B,MAAOpB,EACPqB,SA5Ce,SAACP,GACxBb,EAAUa,EAAMQ,OAAOF,QA4CfG,KAAK,OACLC,YAAY,iBAIhB,wBAAQC,QAASZ,EAAcU,KAAK,SAASlC,UAAU,OAAvD,wBAEJ,gCACI,wBAAQoC,QAASP,EAAcK,KAAK,SAASlC,UAAU,OAAvD,oBAGA,uBACA,qBAAKqC,IAAI,GAAGC,IAAKzB,EAAO0B,eAxExBhC,EACO,cAAC,EAAD,IAEJF,EAAKmC,KAAI,SAAAC,GACZ,OACI,8BACI,8BACI,qBAAKzC,UAAU,WAAWqC,IAAI,GAAGC,IAAKG,EAAIC,OAAOC,SAASC,OADpDH,EAAII,a,MC3BnBC,MATf,WAEE,OACE,qBAAK9C,UAAU,MAAf,SACE,cAAC,EAAD,OCES+C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ec85c934.chunk.js","sourcesContent":["import React from 'react'\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nconst Loader = () => {\r\n    return (\r\n        <div>\r\n            <FontAwesomeIcon className=\"fa-4x fa-spin \" icon = {faSpinner}/>\r\n        </div>\r\n    )\r\n} \r\n\r\nexport default Loader;\r\n","import { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport Loader from './Loader'\r\n\r\nconst GifFInder = () => {\r\n    const [data, setData] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isError, setIsError] = useState(false);\r\n    const [search, setSearch] = useState(\"\");\r\n    const [random, setRandom] = useState([]);\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                setIsLoading(true);\r\n                const results = await axios(\"http://api.giphy.com/v1/gifs/trending?api_key=g25nBHy2WQJRvUjil4QWVNdHBBEfeYEH\")\r\n                console.log(results)\r\n                if (results.status !== 200) {\r\n                    throw new Error(\"Error!\");\r\n                }\r\n                //set the data after we (hopefully) fetch it!\r\n                setData(results.data.data)\r\n                \r\n                //Set loading to false because we've already retrieved the data, so we want to stop the loading animation\r\n                setIsLoading(false);\r\n            } catch (error) {\r\n                if (isError) {\r\n                    setIsError(true);\r\n                    console.log(error);\r\n                }\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [isError]);\r\n\r\n\r\n    const renderGifs = () => {\r\n        if (isLoading) {\r\n            return <Loader />\r\n        }\r\n        return data.map(img => {\r\n            return (\r\n                <div>\r\n                    <div key={img.id}>\r\n                        <img className=\"img mt-2\" alt=\"\" src={img.images.original.url} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n\r\n    const handleSearchChange = (event) => {\r\n        setSearch(event.target.value)\r\n    }\r\n\r\n    const handleSubmit = async (event) => {\r\n        try {\r\n            setIsLoading(true); // <--- after form submits, page will be loading \r\n            event.preventDefault(); // <--- This is so the page doesn't reload after submitting the form\r\n            //Dont need fetchData function because we're not in useEffect anymore...\r\n            const results = await axios(\"https://api.giphy.com/v1/gifs/search?api_key=g25nBHy2WQJRvUjil4QWVNdHBBEfeYEH\", {\r\n                params: {\r\n                    q: search\r\n                }\r\n            });\r\n            console.log(results);\r\n            setData(results.data.data)\r\n            setIsLoading(false);\r\n            setRandom([false]);\r\n        } catch (error) {\r\n            setIsError(true);\r\n        }\r\n    }\r\n\r\n    const handleRandom = async () => {\r\n        try {\r\n            setIsLoading(true); // <--- after form submits, page will be loading \r\n            //Dont need fetchData function because we're not in useEffect anymore...\r\n            const result = await axios(\"https://api.giphy.com/v1/gifs/random?api_key=g25nBHy2WQJRvUjil4QWVNdHBBEfeYEH\")\r\n            \r\n            console.log(result);\r\n            setRandom(result.data.data);\r\n            setIsLoading(false);\r\n            setData([]);\r\n        } catch (error) {\r\n            setIsError(true);\r\n            console.log(error);\r\n        }\r\n        \r\n    }\r\n\r\n    return <div className=\"container\">\r\n        <form className=\"my-5\">\r\n            <input\r\n                value={search}\r\n                onChange={handleSearchChange}\r\n                type=\"text\"\r\n                placeholder=\"Search Here!\"\r\n\r\n            />\r\n\r\n            <button onClick={handleSubmit} type=\"submit\" className=\"ml-2\">Search!</button>\r\n        </form>\r\n        <div>\r\n            <button onClick={handleRandom} type=\"submit\" className=\"ml-2\">\r\n                Random \r\n            </button>\r\n            <br/>\r\n            <img alt=\"\" src={random.image_url}/>\r\n        </div>\r\n        {renderGifs()}\r\n        \r\n    </div>;\r\n}\r\n\r\nexport default GifFInder","import React from'react'\nimport GifFinder from './components/GifFInder'\nimport './App.css';\n //http://api.giphy.com/v1/gifs/trending?api_key=g25nBHy2WQJRvUjil4QWVNdHBBEfeYEH      <--- Trending Search\n //http://api.giphy.com/v1/gifs/search?q=SEARCH+TERM+GOES+HERE&api_key=g25nBHy2WQJRvUjil4QWVNdHBBEfeYEH      <---\n \nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <GifFinder />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}